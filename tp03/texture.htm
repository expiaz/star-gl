<html><head>
<title>Points</title>
<meta http-equiv="content-type" content="text/html; charset=windows-1252">

<script type="text/javascript" src="gl-matrix.js"></script>
<script type="text/javascript" src="webgl-utils.js"></script>
<script type="text/javascript" src="cube.js"></script>
<script type="text/javascript" src="model.js"></script>

<script id="shader-vs" type="x-shader/x-vertex">
    // *** le vertex shader *** 
    attribute vec3 aVertexPosition; // la position du sommet 
	attribute vec2 aVertexCoord; // sa coordonnee de texture 

    uniform mat4 uMVMatrix; // modelviewMatrix
    uniform mat4 uPMatrix; // projectionMatrix

	varying vec2 vTextureCoord; // on souhaite rasteriser la coordonnee

    void main(void) {
        // projection de la position
        gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);

        // stockage de la coordonnee de texture
        vTextureCoord = aVertexCoord * vec2(4.0, 4.0);
    }
</script>

<script id="shader-fs" type="x-shader/x-fragment">
    // *** le fragment shader ***
    precision mediump float; // precision des nombres flottant

	varying vec2 vTextureCoord; // recuperation de la coord rasterisee

    uniform sampler2D uMaTexture; // la texture en entree

    void main(void) {
        // la couleur est attribuee au fragment courant
        gl_FragColor = texture2D(uMaTexture,vTextureCoord);
    }
</script>



<script type="text/javascript">

    var gl; // les fonctionnalités OpenGL
    var theModel; // un modele 3D (voir cube.js / model.js)
    var xrot; // angle de rotation X du modele
    var yrot; // angle de rotation X du modele
    var zTrans; // translation du point de vue

    // initialisation du contexte OpenGL
    function initGL(canvas) {
        try {
            gl = canvas.getContext("experimental-webgl");
            gl.viewportWidth = canvas.width;
            gl.viewportHeight = canvas.height;
        } catch (e) {
        }
        if (!gl) {
            alert("Could not initialise WebGL, sorry :-(");
        }
    }

    // charge et compile les shaders
    function getShader(gl, id) {
        var shaderScript = document.getElementById(id);
        if (!shaderScript) {
            return null;
        }

        var str = "";
        var k = shaderScript.firstChild;
        while (k) {
            if (k.nodeType == 3) {
                str += k.textContent;
            }
            k = k.nextSibling;
        }

        var shader;
        if (shaderScript.type == "x-shader/x-fragment") {
            shader = gl.createShader(gl.FRAGMENT_SHADER);
        } else if (shaderScript.type == "x-shader/x-vertex") {
            shader = gl.createShader(gl.VERTEX_SHADER);
        } else {
            return null;
        }

        gl.shaderSource(shader, str);
        gl.compileShader(shader);

        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            alert(gl.getShaderInfoLog(shader));
            return null;
        }

        return shader;
    }

    // le programme qui gere les shaders executes sur GPU
    var shaderProgram;

    // initialise les shaders et recupere l'adresse memoire des attributs et variables utilisees
    function initShaders() {
        // recupere les vertex et fragment shaders 
        var fragmentShader = getShader(gl, "shader-fs");
        var vertexShader = getShader(gl, "shader-vs");

        // cree le programme et lui associe les vertex/fragments
        shaderProgram = gl.createProgram();
        gl.attachShader(shaderProgram, vertexShader);
        gl.attachShader(shaderProgram, fragmentShader);
        gl.linkProgram(shaderProgram);

        if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
            alert("Could not initialise shaders");
        }

        // active ce shader
        gl.useProgram(shaderProgram);

        // recupere la localisation de l'attribut dans lequel on souhaite acceder aux positions
        shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
        gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute); // active cet attribut 

        // pareil pour les couleurs 
        shaderProgram.vertexCoordAttribute = gl.getAttribLocation(shaderProgram, "aVertexCoord");
        gl.enableVertexAttribArray(shaderProgram.vertexCoordAttribute);

        // recupere les localisation des variables uniformes (globales) pour les 2 matrices
        shaderProgram.pMatrixUniform = gl.getUniformLocation(shaderProgram, "uPMatrix");
        shaderProgram.mvMatrixUniform = gl.getUniformLocation(shaderProgram, "uMVMatrix");
        shaderProgram.maTextureUniform = gl.getUniformLocation(shaderProgram, "uMaTexture");
    }

    // les matrices modelviewMatrix et projectionMatrix
    var mvMatrix = mat4.create();
    var pMatrix = mat4.create();

    // fonction qui s'occupe de passer les matrices au shader
    function setMatrixUniforms() {
        gl.uniformMatrix4fv(shaderProgram.pMatrixUniform, false, pMatrix);
        gl.uniformMatrix4fv(shaderProgram.mvMatrixUniform, false, mvMatrix);
    }


    function drawScene() {
        // initialisation du viewport
        gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);

        // efface les buffers de couleur et de profondeur
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

        // cree une matrice de projection persepctive et la stocke dans pMatrix
        mat4.perspective(45, gl.viewportWidth / gl.viewportHeight, 0.1, 100.0, pMatrix);

        // cree une matrice de modelview par defaut (mvMatrix)
        mat4.lookAt([0,0,-5],[0,0,0],[0,1,0],mvMatrix);

        // translation/rotation pour animer 
        mat4.translate(mvMatrix, [0.0, 0.0, zTrans]);
        mat4.rotate(mvMatrix,yrot,vec3.normalize([0,1,0]));
        mat4.rotate(mvMatrix,xrot,vec3.normalize([1,0,0]));

        // envoie les matrices (modelview et projection) au shader
        setMatrixUniforms();

        // envoie la texture au shader 
        // note : ce n'est pas vraiment un envoie car 
        // la texture est déjà stockée sur le GPU
        // il s'agit d'une adresse memoire dans ce cas
        gl.activeTexture(gl.TEXTURE0); // on active l'unite de texture 0 
        gl.bindTexture(gl.TEXTURE_2D,maTexture); // on place maTexture dans l'unité active
        gl.uniform1i(shaderProgram.maTextureUniform, 0); // on dit au shader que maTextureUniform se trouve sur l'unite de texture 0

        // dessin du model 3D 
        theModel.draw(shaderProgram);
    }


    function handleLoadedTexture(texture) {
        // active la texture (les operations qui suivent feront effet sur celle-ci)
        gl.bindTexture(gl.TEXTURE_2D, texture);
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);

        // envoie les donnees sur GPU
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texture.image);

        // options (filtrage+effets de bordure)
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.MIRRORED_REPEAT);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.MIRRORED_REPEAT);
        gl.generateMipmap(gl.TEXTURE_2D);

        // desactive la texture courante
        gl.bindTexture(gl.TEXTURE_2D, null);
    }


    var maTexture;

    function initTexture() {
        // creation de la texture
        maTexture = gl.createTexture();
        maTexture.image = new Image();
        maTexture.image.onload = function () {
            handleLoadedTexture(maTexture)
        }

        maTexture.image.src = "checkerboard.jpg";
    }


    // utile pour animer 
    var lastTime = 0;
    function animate() {
        var timeNow = new Date().getTime();
        if (lastTime != 0) {
            var elapsed = timeNow - lastTime;
            crot = (crot+elapsed*0.001)%(2.0*Math.PI);
        }
        lastTime = timeNow;
    }

    var keys = {};

    // evenements claviers 
    function keypressed(event) {
        var intKeyCode = event.keyCode;
        var t = 0.3;
        var r = 0.05;

        keys[intKeyCode] = true;

        if(keys['A'.charCodeAt(0)]) { // A 65
            zTrans+=t;
        }
        if(keys['Q'.charCodeAt(0)]) { // Q 81
            yrot = (yrot-r)%(2.0*Math.PI);
        }
        if(keys['Z'.charCodeAt(0)]) { // Z 90
            xrot = (xrot+r)%(2.0*Math.PI);
        }
        if(keys['S'.charCodeAt(0)]) { // S 83
            xrot = (xrot-r)%(2.0*Math.PI);
        }
        if(keys['E'.charCodeAt(0)]) { // E 69
            zTrans-=t;
        }
        if(keys['D'.charCodeAt(0)]) { // D 68
            yrot = (yrot+r)%(2.0*Math.PI);
        } 

        drawScene();
    }

    function keyreleased(event) {
        var intKeyCode = event.keyCode;

        keys[intKeyCode] = false;

        drawScene();
    }


    function tick() {
        requestAnimFrame(tick);
        //handleKeys();
        drawScene();
        //animate();
    }


    function webGLStart() {
        // initialisation du canvas et des objets OpenGL
        var canvas = document.getElementById("texture");
        initGL(canvas);
        initShaders();
        initTexture();

        // creation du cube
        theModel = new Model('singe.json');

        xrot = 0.0;
        yrot = 0.0;
        zTrans = 0.0;

        // la couleur de fond sera noire
        gl.clearColor(0.0, 0.0, 0.0, 1.0);

        // active le teste de profondeur 
        gl.enable(gl.DEPTH_TEST);

        // evenements claviers 
        document.onkeydown = keypressed;
        document.onkeyup = keyreleased;

        // dessine la scene
        tick();
    }


</script>


</head>


<body onload="webGLStart();">
    <canvas id="texture" style="border: none;" width="800" height="800"></canvas>

</body></html>