<html><head>
<title>Points</title>
<meta http-equiv="content-type" content="text/html; charset=windows-1252">

<script type="text/javascript" src="gl-matrix.js"></script>
<script type="text/javascript" src="webgl-utils.js"></script>
<script type="text/javascript" src="model.js"></script>
<script type="text/javascript" src="trackball.js"></script>

<script id="shader-vs" type="x-shader/x-vertex">
    // *** le vertex shader *** 
    attribute vec3 aVertexPosition; // la position du sommet 
    attribute vec3 aVertexNormal; // la normale de ce sommet 
	attribute vec2 aVertexCoord; // sa coordonnee de texture 

    uniform mat4 uMVMatrix; // modelviewMatrix
    uniform mat3 uNMatrix; // normalMatrix
    uniform mat4 uPMatrix; // projectionMatrix

	varying vec2 vTextureCoord; // on souhaite rasteriser la coordonnee
    varying vec3 vNormal; // on souhaite rasteriser la normale
    varying vec4 vPosition; // on souhaite rasteriser la position 

    void main(void) {
        vPosition = uMVMatrix * vec4(aVertexPosition, 1.0);

        vNormal = uNMatrix * aVertexNormal;

        // stockage de la coordonnee de texture
        vTextureCoord = aVertexCoord;

         // projection de la position
        gl_Position = uPMatrix * vPosition;
    }
</script>

<script id="shader-fs" type="x-shader/x-fragment">
    // *** le fragment shader ***
    precision mediump float; // precision des nombres flottant

	varying vec2 vTextureCoord; // recuperation de la coord rasterisee
    varying vec3 vNormal; // recuperation de la normale rasterisee
    varying vec4 vPosition; // recuperation de la position rasterisee

    uniform vec3 uLightColor;
    uniform vec3 uMaterialColor;
    uniform vec3 uLightDirection;

    uniform sampler2D uMaTexture;

    void main(void) {
        // il faut bien penser a renormaliser la normale
        vec3 normal = normalize(vNormal);

        // TODO: implementer Phong
        vec3 Ka = uMaterialColor; //vec3(0);
        vec3 Kd = uLightColor; //vec3(1.0, 0, 0.8);
        vec3 Ks = vec3(1.0, 1.0, 1.0);

        vec3 view = normalize(vPosition.xyz);
        vec3 light = normalize(uLightDirection/*vec3(1.0, 1.0, 0.0)*/);
        vec3 reflection = reflect(light, normal);

        float coefD = max(dot(normal, light), 0.0);
        float coefS = pow(max(dot(view, reflection), 0.0), 50.0);

        vec3 diffuse = Kd * coefD;
        vec3 specular = Ks * coefS;

        // la couleur est attribuee au fragment courant
        gl_FragColor = vec4(uMaterialColor, 0.1) + texture2D(uMaTexture,vTextureCoord) + vec4(diffuse, 1.0) + vec4(specular, 1.0); //vec4(Ka + diffuse + specular, 1.0); //vec4(normal,1.0);
    }
</script>



<script type="text/javascript">

    var gl; // les fonctionnalités OpenGL
    var theModel; // un modele 3D (voir cube.js / model.js)

    // initialisation du contexte OpenGL
    function initGL(canvas) {
        try {
            gl = canvas.getContext("experimental-webgl");
            gl.viewportWidth = canvas.width;
            gl.viewportHeight = canvas.height;
        } catch (e) {
        }
        if (!gl) {
            alert("Could not initialise WebGL, sorry :-(");
        }
    }

    // charge et compile les shaders
    function getShader(gl, id) {
        var shaderScript = document.getElementById(id);
        if (!shaderScript) {
            return null;
        }

        var str = "";
        var k = shaderScript.firstChild;
        while (k) {
            if (k.nodeType == 3) {
                str += k.textContent;
            }
            k = k.nextSibling;
        }

        var shader;
        if (shaderScript.type == "x-shader/x-fragment") {
            shader = gl.createShader(gl.FRAGMENT_SHADER);
        } else if (shaderScript.type == "x-shader/x-vertex") {
            shader = gl.createShader(gl.VERTEX_SHADER);
        } else {
            return null;
        }

        gl.shaderSource(shader, str);
        gl.compileShader(shader);

        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            alert(gl.getShaderInfoLog(shader));
            return null;
        }

        return shader;
    }

    // le programme qui gere les shaders executes sur GPU
    var shaderProgram;

    // initialise les shaders et recupere l'adresse memoire des attributs et variables utilisees
    function initShaders() {
        // recupere les vertex et fragment shaders 
        var fragmentShader = getShader(gl, "shader-fs");
        var vertexShader = getShader(gl, "shader-vs");

        // cree le programme et lui associe les vertex/fragments
        shaderProgram = gl.createProgram();
        gl.attachShader(shaderProgram, vertexShader);
        gl.attachShader(shaderProgram, fragmentShader);
        gl.linkProgram(shaderProgram);

        if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
            alert("Could not initialise shaders");
        }

        // active ce shader
        gl.useProgram(shaderProgram);

        // recupere la localisation de l'attribut dans lequel on souhaite acceder aux positions
        shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
        gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute); // active cet attribut 

        // pareil pour les normales 
        shaderProgram.vertexNormalAttribute = gl.getAttribLocation(shaderProgram, "aVertexNormal");
        gl.enableVertexAttribArray(shaderProgram.vertexNormalAttribute);

        // pareil pour les coordonnees de texture 
        shaderProgram.vertexCoordAttribute = gl.getAttribLocation(shaderProgram, "aVertexCoord");
        gl.enableVertexAttribArray(shaderProgram.vertexCoordAttribute);

        // recupere les localisation des variables uniformes (globales) pour les 2 matrices
        shaderProgram.pMatrixUniform = gl.getUniformLocation(shaderProgram, "uPMatrix");
        shaderProgram.mvMatrixUniform = gl.getUniformLocation(shaderProgram, "uMVMatrix");
        shaderProgram.nMatrixUniform = gl.getUniformLocation(shaderProgram, "uNMatrix");

        // TODO: obtenir les locations de vos variables uniforme ici
        shaderProgram.lightColorUniform = gl.getUniformLocation(shaderProgram, "uLightColor");
        shaderProgram.materialColorUniform = gl.getUniformLocation(shaderProgram, "uMaterialColor");
        shaderProgram.lightDirectionUniform = gl.getUniformLocation(shaderProgram, "uLightDirection");

        shaderProgram.maTextureUniform = gl.getUniformLocation(shaderProgram, "uMaTexture");
    }

    // les matrices modelviewMatrix et projectionMatrix
    var mvMatrix = mat4.create();
    var pMatrix = mat4.create();
    var nMatrix = mat3.create(); // equivalant de modelview, mais dediee aux vecteurs (normales)

    // fonction qui s'occupe de passer les matrices au shader
    function setMatrixUniforms() {
        // mise a jour de la matrice dediee aux normales (a partir de modelviewMatrix)
        mat3.transpose(mat4.toInverseMat3(mvMatrix,nMatrix));

        // envoie des matrices
        gl.uniformMatrix4fv(shaderProgram.pMatrixUniform, false, pMatrix);
        gl.uniformMatrix4fv(shaderProgram.mvMatrixUniform, false, mvMatrix);
        gl.uniformMatrix3fv(shaderProgram.nMatrixUniform, false, nMatrix);
    }


    function drawScene() {
        // initialisation du viewport
        gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);

        // efface les buffers de couleur et de profondeur
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

        // cree une matrice de projection persepctive et la stocke dans pMatrix
        mat4.perspective(45, gl.viewportWidth / gl.viewportHeight, 0.1, 100.0, pMatrix);

        // cree une matrice de modelview par defaut (mvMatrix)
        trackball.setMatrix(mvMatrix);

        // envoie les matrices (modelview et projection) au shader
        setMatrixUniforms();

        // TODO: envoyer vos variables uniform ici
        var lightColors = document.light.color.value.slice(1).match(/.{2}/g).map(v => +parseInt(v, 16)%256/255);
        var materialColors = document.material.color.value.slice(1).match(/.{2}/g).map(v => +parseInt(v, 16)%256/255);
        var lightDirections = [
            parseFloat(document.light.x.value),
            parseFloat(document.light.y.value),
            parseFloat(document.light.z.value),
        ];

        gl.uniform3f(shaderProgram.lightColorUniform, lightColors[0], lightColors[1], lightColors[2]);
        gl.uniform3f(shaderProgram.materialColorUniform, materialColors[0], materialColors[1], materialColors[2]);
        gl.uniform3f(shaderProgram.lightDirectionUniform, lightDirections[0], lightDirections[1], lightDirections[2]);

        gl.activeTexture(gl.TEXTURE0); // on active l'unite de texture 0
        gl.bindTexture(gl.TEXTURE_2D, maTexture); // on place maTexture dans l'unité active
        gl.uniform1i(shaderProgram.maTextureUniform, 0); // on dit au shader que maTextureUniform se trouve sur l'unite de texture 0


        // dessin du model 3D 
        theModel.draw(shaderProgram);
    }

    function handleLoadedTexture(texture) {
        // active la texture (les operations qui suivent feront effet sur celle-ci)
        gl.bindTexture(gl.TEXTURE_2D, texture);
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);

        // envoie les donnees sur GPU
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texture.image);

        // options (filtrage+effets de bordure)
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        gl.generateMipmap(gl.TEXTURE_2D);

        // desactive la texture courante
        gl.bindTexture(gl.TEXTURE_2D, null);
    }

    var maTexture;

    function initTexture() {
        // creation de la texture
        maTexture = gl.createTexture();
        maTexture.image = new Image();
        maTexture.image.onload = function () {
            handleLoadedTexture(maTexture);
        }

        maTexture.image.src = "parquet.jpg";
    }

    // utile pour animer 
    var lastTime = 0;
    function animate() {
        var timeNow = new Date().getTime();
        if (lastTime != 0) {
            var elapsed = timeNow - lastTime;
            // animer quelque chose ici... pour utiliser l'animation
        }
        lastTime = timeNow;
    }

    function tick() {
        requestAnimFrame(tick);
        //handleKeys();
        drawScene();
        //animate(); // décommentez pour animer 
    }


    function webGLStart() {
        // initialisation du canvas et des objets OpenGL
        var canvas = document.getElementById("lighting");
        initGL(canvas); // initialisation du canvas
        initShaders(); // initialisation des shaders
        initTexture();

        // creation du cube
        theModel = new Model("singe.json");

        // la couleur de fond sera noire
        gl.clearColor(0.0, 0.0, 0.0, 1.0);

        // active le teste de profondeur 
        gl.enable(gl.DEPTH_TEST);

        /* Mouse and keyboard interaction functions */
        canvas.addEventListener('mousedown', tbMouseDown, true);
        canvas.addEventListener('mousemove', tbMouseMove, true);
        canvas.addEventListener('mouseup', tbMouseUp, true);    
        
        // creation/placement de la camera 
        trackball  = new TrackBall(); 
        trackball.setTranslation(0.,0.,-5.);

        // dessine la scene
        tick();
    }


</script>


</head>


<body onload="webGLStart();">
    <canvas id="lighting" style="border: none;" width="800" height="800"></canvas>
    <br>
    Move your mouse to interact. 
    Left, right, and middle mouse buttons respectively correspond to rotation, translation and zoom.
    <form name="light">
        <label>
            Lumière
            <input type="color" name="color" value="#FF0000"/>
            X <input name="x" value="1">
            Y <input name="y" value="1">
            Z <input name="z" value="0">
        </label>
    </form>
    <form name="material">
        <label>
            Matériau
            <input type="color" name="color"/>
        </label>
    </form>
</body></html>